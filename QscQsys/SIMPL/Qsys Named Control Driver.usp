#SYMBOL_NAME "Qsys Named Control Driver"

#INCLUDEPATH "..\\QscQsys\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input ButtonOn, ButtonOff, ButtonMomentary, ButtonToggle, Trigger;
Analog_Input ValueScaled, ValueRaw, RampTimeMS;
String_Input StringSet[255];

Digital_Output ButtonIsOn, ButtonIsOff, _skip_, _skip_, Triggered;
Analog_Output ValueScaledOut, ValueRawOut, _skip_;
String_Output StringOut;
                          
//QsysCoreSimpl processor;                          
QsysNamedControlSimpl ctrl;

String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, _skip_, _skip_, _skip_, _skip_, Control_Name[100];
integer_parameter CoreID, NamedControlType, DefaultQsysRampTimeMS;
string_parameter Val_Minimum[10], Val_Maximum[10];

integer currentValScaled;
signed_integer currentValRaw;

Push ButtonOn
{
    ctrl.SetState(1);
}

push ButtonOff
{
    ctrl.SetState(0);
}

push ButtonToggle
{
    ctrl.SetStateToggle();
}

push ButtonMomentary
{
    ctrl.SetState(1);
}
release ButtonMomentary
{
   ctrl.SetState(0);
}

push Trigger
{
    ctrl.Trigger();
}

Threadsafe change StringSet
{
   ctrl.SetString(StringSet);
}

Threadsafe Change ValueScaled
{
    integer x;
    While(x != ValueScaled)
    {
       x = ValueScaled;
        ctrl.SetValueScaled(ValueScaled);
    }
}

Threadsafe Change ValueRaw
{
    signed_integer x;
    While(x != ValueRaw)
    {
       x = ValueRaw;
        ctrl.SetValueRaw(ValueRaw);
    }
}

Change RampTimeMS
{
    ctrl.RampTimeMS(RampTimeMS);
}

Callback Function onInitializationComplete(integer value)
{        
}
Callback Function onValueChange(integer valScaled, signed_integer valRaw, string valString)
{
    currentValScaled = valScaled;
    currentValRaw = valRaw;
    StringOut = valString;
    ValueScaledOut = currentValScaled;
    ValueRawOut = currentValRaw;
}
Callback Function onStateChange(integer value)
{
    if (NamedControlType = 2)
    {
        pulse(20, Triggered);
    }
    else
    {
        switch(value)
            {
                case (1):
                {
                    ButtonIsOff = OFF;
                    ButtonIsOn = ON;
                }
                case (0):
                {
                    ButtonIsOff = ON;
                    ButtonIsOn = OFF;
                }
            }
    }
}
Callback Function onStringChange(string value)
{
    StringOut = value;
}

Function Main()
{              
    //RegisterDelegate(processor, onIsRegistered, onInitializationComplete);
    RegisterDelegate(ctrl, newValueChange, onValueChange);
    RegisterDelegate(ctrl, newStateChange, onStateChange);
    RegisterDelegate(ctrl, newStringChange, onStringChange);
    ctrl.Initialize(CoreID, Control_Name, NamedControlType);                            
    ctrl.RampTimeMS(DefaultQsysRampTimeMS);
    ctrl.SetMinMax(Val_Minimum, Val_Maximum);
}
