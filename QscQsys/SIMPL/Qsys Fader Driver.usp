#SYMBOL_NAME "Qsys Fader Driver"

#INCLUDEPATH "..\\QscQsys\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input MuteOn, MuteOff, MuteToggle, _skip_, _skip_;
Analog_Input Volume, Position, RampTimeMS;

Digital_Output MuteIsOn, MuteIsOff;
Analog_Output _skip_,_skip_,_skip_, VolumeIs, PositionIs;
string_output StringOut;
                                                   
QsysFaderSimpl fader;

String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, _skip_, _skip_, _skip_, ComponentName[100];
integer_parameter CoreID, DefaultQsysRampTimeMS;

Push MuteOn
{
    fader.SetMute(1);
}

Push MuteOff
{
    fader.SetMute(0);
}

Push MuteToggle
{
    fader.ToggleMute();
}


Threadsafe Change Volume
{
    integer x;
    While(x != Volume)
    {
       x = Volume;
        fader.SetVolume(Volume);
    }
}

Threadsafe Change Position
{
    integer x;
    While(x != Position)
    {
        x = Position;
        fader.SetVolumePosition(Position);
    }
}

Change RampTimeMS
{
    fader.RampTimeMS(RampTimeMS);
}

Callback Function onVolumeChange(signed_integer val, string valString)
{
    StringOut = valString;
    VolumeIs = val;
}

Callback Function onPositionChange(integer pos)
{
    PositionIs = pos;
}

Callback Function onMuteChange(integer value)
{
    switch(value)
    {
        case (1):
        {
            MuteIsOff = OFF;
           MuteIsOn = ON;
        }
        case (0):
        {
            MuteIsOff = ON;
            MuteIsOn = OFF;
        }
    }
}
Callback Function onStringChange(string value)
{
    StringOut = value;
}

Function Main()
{
    RegisterDelegate(fader, newVolumeChange, onVolumeChange);
    RegisterDelegate(fader, newVolumePositionChange, onPositionChange);
    RegisterDelegate(fader, newMuteChange, onMuteChange);
    RegisterDelegate(fader, newStringChange, onStringChange);
    fader.Initialize(CoreID, ComponentName);                                  
    fader.RampTimeMS(DefaultQsysRampTimeMS);
}
